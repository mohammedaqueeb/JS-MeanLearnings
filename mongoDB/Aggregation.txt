Aggregation  https://docs.mongodb.com/manual/aggregation/

Aggregation operations process multiple documents and return computed results. 

You can use aggregation operations to:

1 .Group values from multiple documents together.
2 .Perform operations on the grouped data to return a single result.
3 .Analyze data changes over time.


To perform aggregation operations, you can use:

1. Aggregation pipelines, which are the preferred method for performing aggregations.
2. Single purpose aggregation methods, which are simple but lack the capabilities of an aggregation pipeline.
3. Map-reduce operations, which are deprecated starting in MongoDB 5.0. Instead, use an aggregation pipeline..


db.orders.aggregate( [
   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },
   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }
] )



db.collection.estimatedDocumentCount()
Returns an approximate count of the documents in a collection or a view.



db.collection.count()
Returns a count of the number of documents in a collection or a view.


db.collection.distinct()
Returns an array of documents that have distinct values for the specified field.

Map-Reduce

Instead of map-reduce, you should use an aggregation pipeline. Aggregation pipelines provide better performance and usability than map-reduce.
You can rewrite map-reduce operations using aggregation pipeline stages, such as $group, $merge, and others.
For map-reduce operations that require custom functionality, you can use the $accumulator and $function aggregation operators, available starting in version 4.4. You can use those operators to define custom aggregation expressions in JavaScript.

An aggregation pipeline provides better performance and usability than a map-reduce operation.